func square(x) = x * x
func even(x) = x % 2 == 0
func max(x, y) = x if x > y else y

// Check task 1 in https://www.joelonsoftware.com/2005/12/29/test-yourself/
func accumulate(combiner, nullValue, l) =
    nullValue if isEmpty(l) else
    combiner(head(l), accumulate(combiner, nullValue, tail(l)))

func getSumOfSquares(l) =
    accumulate((x, y) -> square(x) + y, 0, l)

func reverse1(array) =
    [] if isEmpty(array) else
    let current = head(array);
        rest = tail(array);
    in [*reverse1(rest), current]

// Can also be implemented using the built in-reduce function
func reverse2(array) =
    reduce((acc, x) -> [x, *acc], [], array)

func flatten1(array) =
    [] if isEmpty(array) else
    [*head(array), *flatten1(tail(array))]

// Can also be implemented using the built-in reduce function
func flatten2(array) =
    reduce((acc, x) -> [*acc, *x], [], array)

func quicksort(array) =
    [] if isEmpty(array) else
    let pivot = head(array);
        rest = tail(array);
        lowerHalf = rest |> filter(`< pivot`) |> quicksort;
        higherHalf = rest |> filter(`>= pivot`) |> quicksort;
    in [*lowerHalf, pivot, *higherHalf]

// put multiple statements on the same line using semicolons
evens = [2,4,6]; odds = [1,3,5]

// join arrays using the concatenation operators...
concatArray = [0] ++ evens ++ [0] ++ odds ++ [0]

// ...or using the spread syntax
spread = [0, *evens, 0, *odds, 0]

// strings are character arrays
concatString = "One" ++ ", " ++ "Two"

numbers = [1, 3, 12, 4, 2, 11, 31, 7, 8]
nested = [
    [(1, "One"), (2, "Two"), (3, "Three")],
    [(4, "Four"), (5, "Five"), (6, "Six")],
]

sorted = quicksort(numbers)

reversed1 = reverse1(numbers)
reversed2 = reverse2(numbers)

flattened1 = flatten1(nested)
flattened2 = flatten2(nested)

sumOfSquares = getSumOfSquares(numbers)
largestEvenSquare = numbers
    |> filter(even)
    |> map(square)
    |> reduce0(max)
