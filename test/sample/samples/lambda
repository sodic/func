// Two ways to define top-level functions
// First way supports recursion and is preferred
func mul1(x, y) = x * y
mul2 = (x, y) -> x * y

func sub1(x, y) = x - y
sub2 = (x, y) -> x - y

func mod1(x, y) = x % y
mod2 = (x, y) -> x % y

// Checking whether functions are equivalent to each other, as well as
// to their respective operator references
samples = [(1, 3), (6, 8), (3, 5), (2, 3), (4, 9), (10, 9), (7, 2), (4, 7),]

func all(predicate, array) = array |> map(predicate) |> reduce(`&&`, True)
func areAllEqual(array) = tail(array) |> all(`== head(array)`)

areAllTrue = all(id)

// Transforms a regular function of type a -> b -> c to receive a tuple.
// Its type becomes (a, b) -> c.
uncurry = (f) -> (pair) -> f(first(pair), second(pair))

functions =[
    [mul1, mul2, `*`,],
    [sub1, sub2, `-`,],
    [mod1, mod2, `%`,],
] |> (map . map)(uncurry)

areFunctionsEquivalent =
    let func applyToSample(sample) = functions
        |> (map . map)(`sample |>`)
    in samples
        |> map(applyToSample)
        |> (map . map)(areAllEqual)
        |> map(areAllTrue)
        |> areAllTrue


// Finding all samples where:
// 1. The first number is even
// 2. The second number is odd
// 3. The first member is strictly lower than the second number
// 4. The first number doubled is larger than the second number

conditions = [
    (x, y) -> x % 2 == 0,
    (x, y) -> y % 2 == 1,
    `<`,
    (x, y) -> 2*x > y,
] |> map(uncurry)

// should leave only [(2, 3), (4, 7)]
filteredSamples = samples
    |> filter(
        (sample) -> conditions |> map(`sample |>`) |> all(id)
    )
