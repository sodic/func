// This sample demonstrates how we can use the fact that functions are first-class entities in
// creative ways.

// Two ways to define top-level functions. Prefer the first way, it's more clear and supports
// recursion:
func mul1(x, y) = x * y
mul2 = (x, y) -> x * y

func sub1(x, y) = x - y
sub2 = (x, y) -> x - y

func mod1(x, y) = x % y
mod2 = (x, y) -> x % y

// We can check whether functions are equivalent to each other, as well as to their respective
// operator references.
samples = [(1, 3), (6, 8), (3, 5), (2, 3), (4, 9), (10, 9), (7, 2), (4, 7),]

func all(predicate, array) = array 
    |> map(predicate) 
    |> reduce(`&&`, True)

func areAllEqual(array) = tail(array) 
    |> all(`== head(array)`)

areAllTrue = all(id)

// Transforms a function of type a -> b -> c to a function of type (a, b) -> c. In other words, it
// collects the first two arguments of a curried function into a tuple.
uncurry = (f) -> (pair) -> f(first(pair), second(pair))

functions =[
    [mul1, mul2, `*`,],
    [sub1, sub2, `-`,],
    [mod1, mod2, `%`,],
] |> (map . map)(uncurry)

areFunctionsEquivalent =
    let func applyToSample(sample) = functions
        |> (map . map)(`sample |>`)
    in samples
        |> map(applyToSample)
        |> (map . map)(areAllEqual)
        |> map(areAllTrue)
        |> areAllTrue


// Let's find all samples where:
// 1. The first number is even
// 2. The second number is odd
// 3. The first member is strictly lower than the second number
// 4. The first number doubled is larger than the second number

conditions = [
    (x, y) -> x % 2 == 0,
    (x, y) -> y % 2 == 1,
    `<`,
    (x, y) -> 2 * x > y,
] |> map(uncurry)

// This filter should leave only [(2, 3), (4, 7)]:
filteredSamples = samples
    |> filter(
        (sample) -> conditions |> map(`sample |>`) |> all(id)
    )
