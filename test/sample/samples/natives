// alternative implementations of map, filter, and reduce

func myMap(f, array) =
    [] if isEmpty(array) else
    let first = head(array) |> f;
        rest = tail(array) |> myMap(f);
    in [first, *rest]

func myFilter(p, array) =
    [] if isEmpty(array) else
    let current = head(array);
        others = tail(array) |> myFilter(p);
    in [current, *others] if p(current) else
        others

func myReduce(f, acc, array) =
    acc if isEmpty(array) else
    myReduce(f, f(acc, head(array)), tail(array))

numbers = [1.2, 2.5, 3.4, 4.3, 2.1, 1.8, 4.7]

// reducers and mappers
// todo remove after supporting lambdas and/or direct operator referencing
func add(x, y) = x + y
func mul(x, y) = x * y
func step(thresh, x) = 0 if x < thresh else 1
func less(x, y) = x < y

// comparing builtins to user-defined alternatives

sum = reduce(add, 0, numbers)
mySum = myReduce(add, 0, numbers)
isSumOk = mySum == sum

product = reduce(mul, 1, numbers)
myProduct = myReduce(mul, 1, numbers)
isProductOk = product == myProduct

greaterThan3 = myFilter(less(3), numbers)

// should be "0111001"
digitalSignal = numbers
    |> myMap(step(2.5))
    |> join("")
